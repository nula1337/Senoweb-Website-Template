{
    "type": "object",
    "title": "Decap CMS config schema",
    "description": "Config file schema for Decap CMS",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "required": [
        "backend",
        "media_folder",
        "collections"
    ],
    "properties": {
        "backend": {
            "type": "object",
            "description": "The backend option specifies how to access the content for your site, including authentication.",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "enum": [
                        "github",
                        "gitlab",
                        "gitea",
                        "azure",
                        "bitbucket",
                        "git-gateway",
                        "test-repo",
                        "proxy"
                    ],
                    "description": "Name identifier for the registerBackend."
                },
                "repo": {
                    "type": "string",
                    "description": "Required for github, gitlab, azure, gitea and bitbucket backends; ignored by git-gateway. Follows the pattern [org-or-username]/[repo-name]."
                },
                "branch": {
                    "type": "string",
                    "description": "The branch where published content is stored. All CMS commits and PRs are made to this branch.",
                    "default": "master"
                },
                "api_root": {
                    "type": "string",
                    "description": "The API endpoint. Only necessary in certain cases, like with GitHub Enterprise or self-hosted GitLab/Gitea.\n\nhttps://api.github.com (GitHub)\nhttps://gitlab.com/api/v4 (GitLab)\nhttps://try.gitea.io/api/v1 (Gitea)\n https://api.bitbucket.org/2.0 (Bitbucket)"
                },
                "site_domain": {
                    "type": "string",
                    "description": "Sets the site_id query param sent to the API endpoint. Non-Netlify auth setups will often need to set this for local development to work properly."
                },
                "base_url": {
                    "type": "string",
                    "description": "OAuth client hostname (just the base domain, no path). Required when using an external OAuth server or self-hosted GitLab/Gitea."
                },
                "auth_endpoint": {
                    "type": "string",
                    "description": "Path to append to base_url for authentication requests. Optional."
                },
                "cms_label_prefix": {
                    "type": "string",
                    "description": "Pull (or Merge) Requests label prefix when using editorial workflow. Optional."
                },
                "open_authoring": {
                    "type": "boolean",
                    "description": "(Beta) When using the GitHub backend, you can use the CMS to accept contributions from GitHub users without giving them access to your repository."
                },
                "squash_merges": {
                    "type": "boolean",
                    "description": "(Beta) When using the Editorial Workflow with the github or GitHub-connected git-gateway backends, Decap CMS creates a pull request for each unpublished entry. Every time the unpublished entry is changed and saved, a new commit is added to the pull request. When the entry is published, the pull request is merged, and all of those commits are added to your project commit history in a merge commit."
                },
                "commit_messages": {
                    "type": "object",
                    "description": "(Beta - see docs) When using the Editorial Workflow with the github or GitHub-connected git-gateway backends, Decap CMS creates a pull request for each unpublished entry. Every time the unpublished entry is changed and saved, a new commit is added to the pull request. When the entry is published, the pull request is merged, and all of those commits are added to your project commit history in a merge commit."
                }
            }
        },
        "local_backend": {
            "description": "Set this property to connect CMS to a local Git repo instead of a live one",
            "oneOf": [
                {
                    "type": "boolean"
                },
                {
                    "type": "object",
                    "properties": {
                        "url": {
                            "type": "string",
                            "description": "Local backend URL"
                        }
                    }
                }
            ]
        },
        "publish_mode": {
            "type": "string",
            "description": "The publish_mode option allows you to enable \"Editorial Workflow\" mode for more control over the content publishing phases. All unpublished entries will be arranged in a board according to their status, and they can be further reviewed and edited before going live.",
            "enum": [
                "editorial_workflow"
            ]
        },
        "media_folder": {
            "type": "string",
            "description": "The media_folder option specifies the folder path where uploaded files should be saved, relative to the base of the repo."
        },
        "public_folder": {
            "type": "string",
            "description": "specifies the folder path where the files uploaded by the media library will be accessed, relative to the base of the built site. For fields controlled by [file] or [image] widgets, the value of the field is generated by prepending this path to the filename of the selected file. Defaults to the value of media_folder, with an opening / if one is not already included."
        },
        "media_library": {
            "type": "object",
            "description": "Media library integrations are configured via the media_library property, and its value should be an object with at least a name property. A config property can also be used for options that should be passed to the library in use.",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the media library"
                },
                "config": {
                    "type": "object",
                    "description": "A config property can also be used for options that should be passed to the library in use.",
                    "properties": {
                        "max_file_size": {
                            "type": [
                                "number",
                                "string"
                            ],
                            "description": "Maximum file size for uploads"
                        },
                        "folder_support": {
                            "type": "boolean",
                            "description": "Enable folder uploads"
                        }
                    }
                }
            }
        },
        "site_url": {
            "type": "string",
            "description": "The site_url setting should provide a URL to your published site. May be used by the CMS for various functionality. Used together with a collection's preview_path to create links to live content."
        },
        "display_url": {
            "type": "string",
            "description": "When the display_url setting is specified, the CMS UI will include a link in the fixed area at the top of the page, allowing content authors to easily return to your main site. The text of the link consists of the URL without the protocol portion (e.g., your-site.com).\nDefaults to site_url."
        },
        "logo_url": {
            "type": "string",
            "description": "Logo at the top of the login page. Assumed to be a URL to an image file"
        },
        "locale": {
            "type": "string",
            "default": "en"
        },
        "show_preview_links": {
            "description": "Deploy Preview Links can be disabled by setting show_preview_links to false.",
            "type": "boolean",
            "default": true
        },
        "search": {
            "description": "The search functionally requires loading all collection(s) entries, which can exhaust rate limits on large repositories. It can be disabled by setting the top level search property to false.",
            "type": "boolean",
            "default": true
        },
        "slug": {
            "type": "object",
            "description": "For folder collections where users can create new items, the slug option specifies a template for generating new filenames based on a file's creation date and title field. (This means that all collections with create: true must have a title field (a different field can be used via identifierfield).\n \nThe slug template can also reference a field value by name, eg. {{title}}. If a field name conflicts with a built in template tag name - for example, if you have a field named slug, and would like to reference that field via {{slug}}, you can do so by adding the explicit fields. prefix, eg. {{fields.slug}}.\n \nAvailable template tags:\n \nAny field can be referenced by wrapping the field name in double curly braces, eg. {{author}} \n{{slug}}: a url-safe version of the title field (or identifier field) for the file \n{{year}}: 4-digit year of the file creation date \n{{month}}: 2-digit month of the file creation date \n{{day}}: 2-digit day of the month of the file creation date \n{{hour}}: 2-digit hour of the file creation date \n{{minute}}: 2-digit minute of the file creation date \n{{second}}: 2-digit second of the file creation date",
            "properties": {
                "encoding": {
                    "enum": [
                        "unicode",
                        "ascii"
                    ],
                    "description": "\nunicode (default): Sanitize filenames (slugs) according to RFC3987 and the WHATWG URL spec. This spec allows non-ASCII (or non-Latin) characters to exist in URLs.\nascii: Sanitize filenames (slugs) according to RFC3986. The only allowed characters are (0-9, a-z, A-Z, , -, ~).",
                    "default": "unicode"
                },
                "clean_accents": {
                    "description": "Set to true to remove diacritics from slug characters before sanitizing. This is often helpful when using ascii encoding.",
                    "type": "boolean"
                },
                "sanitize_replacement": {
                    "type": "string",
                    "description": "The replacement string used to substitute unsafe characters; defaults to -",
                    "default": "-"
                }
            }
        },
        "collections": {
            "type": "array",
            "description": "The collections setting is the heart of your CMS configuration, as it determines how content types and editor fields in the UI generate files and content in your repository. Each collection you configure displays in the left sidebar of the Content page of the editor UI, in the order they are entered into your CMS config.yml file.",
            "items": {
                "type": "object",
                "required": [
                    "name"
                ],
                "oneOf": [
                    {
                        "required": [
                            "folder"
                        ]
                    },
                    {
                        "required": [
                            "files"
                        ]
                    }
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "unique identifier for the collection, used as the key when referenced in other contexts"
                    },
                    "label": {
                        "type": "string",
                        "description": "label for the collection in the editor UI; defaults to the value of name"
                    },
                    "label_singular": {
                        "type": "string",
                        "description": "singular label for certain elements in the editor; defaults to the value of label"
                    },
                    "description": {
                        "type": "string",
                        "description": "optional text, displayed below the label when viewing a collection"
                    },
                    "folder": {
                        "type": "string",
                        "description": "Folder collections represent one or more files with the same format, fields, and configuration options, all stored within the same folder in the repository. \nNote: Folder collections must have at least one field with the name title for creating new entry slugs. That field should use the default string widget. The label for the field can be any string value. If you wish to use a different field as your identifier, set identifier_field to the field name. See the Collections reference doc for details on how collections and fields are configured. If you forget to add this field, you will get an error that your collection \"must have a field that is a valid entry identifier\"."
                    },
                    "files": {
                        "type": "array",
                        "description": "A files collection contains one or more uniquely configured files. Unlike items in folder collections, which repeat the same configuration over all files in the folder, each item in a files collection has an explicitly set path, filename, and configuration. This can be useful for unique files with a custom set of fields, like a settings file or a custom landing page with a unique content structure.",
                        "items": {
                            "type": "object",
                            "required": [
                                "name",
                                "label",
                                "file",
                                "fields"
                            ],
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "description": "unique identifier for the file"
                                },
                                "label": {
                                    "type": "string",
                                    "description": "file label"
                                },
                                "file": {
                                    "type": "string",
                                    "description": "unique filepath (relative to the base of the repo)."
                                },
                                "fields": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/field"
                                    }
                                }
                            }
                        }
                    },
                    "create": {
                        "description": "for folder collections only; allows users to create new items in the collection",
                        "default": false,
                        "type": "boolean"
                    },
                    "publish": {
                        "description": "for publish_mode: editorial_workflow only; false hides UI publishing controls for a collection;",
                        "default": true,
                        "type": "boolean"
                    },
                    "hide": {
                        "description": "hides a collection in the CMS UI; defaults to false. Useful when using the relation widget to hide referenced collections.",
                        "default": false,
                        "type": "boolean"
                    },
                    "delete": {
                        "description": "prevents users from deleting items in a collection; defaults to true",
                        "default": true,
                        "type": "boolean"
                    },
                    "summary": {
                        "type": "string",
                        "description": "This setting allows the customization of the collection list view. Similar to the slug field, a string with templates can be used to include values of different fields, e.g. {{title}}. This option over-rides the default of title field and identifier_field\nTemplate tags include: \n{{title}} \n{{filename}} The file name without the extension part. \n{{extension}} The file extension. \n{{commit_date}} The file commit date on supported backends (git based backends). \n{{commit_author}} The file author date on supported backends (git based backends)."
                    },
                    "slug": {
                        "type": "string",
                        "description": "For folder collections where users can create new items, the slug option specifies a template for generating new filenames based on a file's creation date and title field. \n\nTemplate tags include:\nAny field can be referenced by wrapping the field name in double curly braces, eg. {{author}} \n{{slug}}: a url-safe version of the title field (or identifier field) for the file \n{{year}}: 4-digit year of the file creation date \n{{month}}: 2-digit month of the file creation date \n{{day}}: 2-digit day of the month of the file creation date \n{{hour}}: 2-digit hour of the file creation date \n{{minute}}: 2-digit minute of the file creation date \n{{second}}: 2-digit second of the file creation date"
                    },
                    "extension": {
                        "type": "string",
                        "description": "Determines the file extension searched for when finding existing entries in a folder collection and it determines the file extension used to save new collection items. It accepts the following values: yml, yaml, toml, json, md, markdown, html.",
                        "enum": [
                            "yaml",
                            "yml",
                            "json",
                            "toml",
                            "markdown",
                            "md",
                            "html"
                        ]
                    },
                    "format": {
                        "description": "determines how collection files are parsed and saved. It will be inferred if the extension field or existing collection file extensions match one of the supported extensions.",
                        "type": "string",
                        "enum": [
                            "yaml-frontmatter",
                            "yml",
                            "yaml",
                            "json",
                            "frontmatter",
                            "toml-frontmatter",
                            "toml",
                            "json-frontmatter"
                        ]
                    },
                    "fields": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/field"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "field": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "description": "unique identifier for the field, used as the key when referenced in other contexts (like the relation widget)"
                },
                "label": {
                    "type": "string",
                    "description": "label for the field in the editor UI; defaults to the value of name"
                },
                "widget": {
                    "type": "string",
                    "description": "Defines a widget using the registerWidget identifier name",
                    "enum": [
                        "string",
                        "text",
                        "markdown",
                        "datetime",
                        "date",
                        "image",
                        "file",
                        "hidden",
                        "number",
                        "boolean",
                        "list",
                        "map",
                        "object",
                        "relation",
                        "select",
                        "code",
                        "color",
                        "uuid"
                    ]
                },
                "required": {
                    "description": "specify as false to make a field optional; defaults to true",
                    "type": "boolean",
                    "default": true
                },
                "hint": {
                    "type": "string",
                    "description": "optionally add helper text directly below a widget."
                },
                "comment": {
                    "type": "string",
                    "description": "(optional) comment to add before the field (only supported for yaml)"
                },
                "default": {
                    "description": "specify a default value for a field; available for most widget types. Please note that field default value only works for folder collection type."
                },
                "pattern": {
                    "type": "array",
                    "description": "add field validation by specifying a list with a regex pattern and an error message (first entry in array is regex pattern, second is the error message)",
                    "minItems": 2,
                    "maxItems": 2,
                    "items": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string"
                        }
                    ]
                },
                "fields": {
                    "type": "array",
                    "description": "For nested or complex field structures, define sub-fields",
                    "items": {
                        "$ref": "#/definitions/field"
                    }
                },
                "options": {
                    "oneOf": [
                        {
                            "type": "array",
                            "description": "List of options for select or other widgets"
                        },
                        {
                            "type": "object",
                            "description": "Configuration object for specific widget behaviors"
                        }
                    ]
                },
                "min": {
                    "type": [
                        "number",
                        "string"
                    ],
                    "description": "Minimum value for number or date-based widgets"
                },
                "max": {
                    "type": [
                        "number",
                        "string"
                    ],
                    "description": "Maximum value for number or date-based widgets"
                },
                "step": {
                    "type": [
                        "number",
                        "string"
                    ],
                    "description": "Step increment for number-based widgets"
                }
            }
        }
    }
}